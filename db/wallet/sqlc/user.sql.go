// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  email, wallet_hash_password
) VALUES (
  $1, $2
)
RETURNING id, email, wallet_hash_password, created_at, updated_at
`

type CreateUserParams struct {
	Email              string `json:"email"`
	WalletHashPassword string `json:"wallet_hash_password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.WalletHashPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.WalletHashPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, wallet_hash_password, created_at, updated_at FROM users WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.WalletHashPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
